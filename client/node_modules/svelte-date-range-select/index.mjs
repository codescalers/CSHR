function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function to_number(value) {
    return value === '' ? undefined : +value;
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.data !== data)
        text.data = data;
}
function set_input_value(input, value) {
    if (value != null || input.value) {
        input.value = value;
    }
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const prop_values = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, prop_values, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if ($$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set() {
        // overridden by instance, if it has props
    }
}

function noop$1() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run$1(fn) {
    return fn();
}
function blank_object$1() {
    return Object.create(null);
}
function run_all$1(fns) {
    fns.forEach(run$1);
}
function is_function$1(thing) {
    return typeof thing === 'function';
}
function safe_not_equal$1(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function exclude_internal_props(props) {
    const result = {};
    for (const k in props)
        if (k[0] !== '$')
            result[k] = props[k];
    return result;
}
function null_to_empty(value) {
    return value == null ? '' : value;
}

function append$1(target, node) {
    target.appendChild(node);
}
function insert$1(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach$1(node) {
    node.parentNode.removeChild(node);
}
function element$1(name) {
    return document.createElement(name);
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function attr$1(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else
        node.setAttribute(attribute, value);
}
function children$1(element) {
    return Array.from(element.childNodes);
}

let current_component$1;
function set_current_component$1(component) {
    current_component$1 = component;
}

const dirty_components$1 = [];
const binding_callbacks$1 = [];
const render_callbacks$1 = [];
const flush_callbacks$1 = [];
const resolved_promise$1 = Promise.resolve();
let update_scheduled$1 = false;
function schedule_update$1() {
    if (!update_scheduled$1) {
        update_scheduled$1 = true;
        resolved_promise$1.then(flush$1);
    }
}
function add_render_callback$1(fn) {
    render_callbacks$1.push(fn);
}
function flush$1() {
    const seen_callbacks = new Set();
    do {
        // first, call beforeUpdate functions
        // and update components
        while (dirty_components$1.length) {
            const component = dirty_components$1.shift();
            set_current_component$1(component);
            update$1(component.$$);
        }
        while (binding_callbacks$1.length)
            binding_callbacks$1.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks$1.length; i += 1) {
            const callback = render_callbacks$1[i];
            if (!seen_callbacks.has(callback)) {
                callback();
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
            }
        }
        render_callbacks$1.length = 0;
    } while (dirty_components$1.length);
    while (flush_callbacks$1.length) {
        flush_callbacks$1.pop()();
    }
    update_scheduled$1 = false;
}
function update$1($$) {
    if ($$.fragment) {
        $$.update($$.dirty);
        run_all$1($$.before_update);
        $$.fragment.p($$.dirty, $$.ctx);
        $$.dirty = null;
        $$.after_update.forEach(add_render_callback$1);
    }
}
const outroing$1 = new Set();
function transition_in$1(block, local) {
    if (block && block.i) {
        outroing$1.delete(block);
        block.i(local);
    }
}
function mount_component$1(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback$1(() => {
        const new_on_destroy = on_mount.map(run$1).filter(is_function$1);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all$1(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback$1);
}
function destroy_component$1(component, detaching) {
    if (component.$$.fragment) {
        run_all$1(component.$$.on_destroy);
        component.$$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        component.$$.on_destroy = component.$$.fragment = null;
        component.$$.ctx = {};
    }
}
function make_dirty$1(component, key) {
    if (!component.$$.dirty) {
        dirty_components$1.push(component);
        schedule_update$1();
        component.$$.dirty = blank_object$1();
    }
    component.$$.dirty[key] = true;
}
function init$1(component, options, instance, create_fragment, not_equal, prop_names) {
    const parent_component = current_component$1;
    set_current_component$1(component);
    const props = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props: prop_names,
        update: noop$1,
        not_equal,
        bound: blank_object$1(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object$1(),
        dirty: null
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, props, (key, ret, value = ret) => {
            if ($$.ctx && not_equal($$.ctx[key], $$.ctx[key] = value)) {
                if ($$.bound[key])
                    $$.bound[key](value);
                if (ready)
                    make_dirty$1(component, key);
            }
            return ret;
        })
        : props;
    $$.update();
    ready = true;
    run_all$1($$.before_update);
    $$.fragment = create_fragment($$.ctx);
    if (options.target) {
        if (options.hydrate) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment.l(children$1(options.target));
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment.c();
        }
        if (options.intro)
            transition_in$1(component.$$.fragment);
        mount_component$1(component, options.target, options.anchor);
        flush$1();
    }
    set_current_component$1(parent_component);
}
class SvelteComponent$1 {
    $destroy() {
        destroy_component$1(this, 1);
        this.$destroy = noop$1;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set() {
        // overridden by instance, if it has props
    }
}

/* src\Icon.svelte generated by Svelte v3.12.1 */

function add_css() {
	var style = element$1("style");
	style.id = 'svelte-p8vizn-style';
	style.textContent = ".fa-svelte.svelte-p8vizn{width:1em;height:1em;overflow:visible;display:inline-block}";
	append$1(document.head, style);
}

function create_fragment(ctx) {
	var svg, path_1, svg_class_value;

	return {
		c() {
			svg = svg_element("svg");
			path_1 = svg_element("path");
			attr$1(path_1, "fill", "currentColor");
			attr$1(path_1, "d", ctx.path);
			attr$1(svg, "aria-hidden", "true");
			attr$1(svg, "class", svg_class_value = "" + null_to_empty(ctx.classes) + " svelte-p8vizn");
			attr$1(svg, "role", "img");
			attr$1(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr$1(svg, "viewBox", ctx.viewBox);
		},

		m(target, anchor) {
			insert$1(target, svg, anchor);
			append$1(svg, path_1);
		},

		p(changed, ctx) {
			if (changed.path) {
				attr$1(path_1, "d", ctx.path);
			}

			if ((changed.classes) && svg_class_value !== (svg_class_value = "" + null_to_empty(ctx.classes) + " svelte-p8vizn")) {
				attr$1(svg, "class", svg_class_value);
			}

			if (changed.viewBox) {
				attr$1(svg, "viewBox", ctx.viewBox);
			}
		},

		i: noop$1,
		o: noop$1,

		d(detaching) {
			if (detaching) {
				detach$1(svg);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { icon } = $$props;

  let path = [];
  let classes = "";
  let viewBox = "";

	$$self.$set = $$new_props => {
		$$invalidate('$$props', $$props = assign(assign({}, $$props), $$new_props));
		if ('icon' in $$new_props) $$invalidate('icon', icon = $$new_props.icon);
	};

	$$self.$$.update = ($$dirty = { icon: 1, $$props: 1 }) => {
		if ($$dirty.icon) { $$invalidate('viewBox', viewBox = "0 0 " + icon.icon[0] + " " + icon.icon[1]); }
		$$invalidate('classes', classes = "fa-svelte " + ($$props.class ? $$props.class : ""));
		if ($$dirty.icon) { $$invalidate('path', path = icon.icon[4]); }
	};

	return {
		icon,
		path,
		classes,
		viewBox,
		$$props: $$props = exclude_internal_props($$props)
	};
}

class Icon extends SvelteComponent$1 {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-p8vizn-style")) add_css();
		init$1(this, options, instance, create_fragment, safe_not_equal$1, ["icon"]);
	}
}

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var faCheck = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'check';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f00c';
var svgPathData = 'M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faCheck = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

unwrapExports(faCheck);
var faCheck_1 = faCheck.definition;
var faCheck_2 = faCheck.faCheck;
var faCheck_3 = faCheck.prefix;
var faCheck_4 = faCheck.iconName;
var faCheck_5 = faCheck.width;
var faCheck_6 = faCheck.height;
var faCheck_7 = faCheck.ligatures;
var faCheck_8 = faCheck.unicode;
var faCheck_9 = faCheck.svgPathData;

/* src/DateRangeSelect.svelte generated by Svelte v3.20.1 */

function add_css$1() {
	var style = element("style");
	style.id = "svelte-nnopc8-style";
	style.textContent = ".applyButton.svelte-nnopc8{width:var(--applyButtonWidth, 25px);height:var(--applyButtonHeight, 25px);background-color:var(--applyButtonBackgroundColor, #007bff);color:var(--applyButtonColor, #fff);padding:var(--applyButtonPadding, 0px)}.sliderEnd.svelte-nnopc8{background:var(--sliderEndBackgroundColor, #007bff);height:var(--sliderEndHeight, 2px);width:var(--sliderEndWidth, 129px);cursor:pointer;margin:var(--sliderEndMargin, 3px)}.sliderStart.svelte-nnopc8{background:var(--sliderStartBackgroundColor, #007bff);height:var(--sliderStartHeight, 2px);width:var(--sliderStartWidth, 129px);cursor:pointer;margin:var(--sliderStartMargin, 3px)}.heading.svelte-nnopc8{color:var(--headingColor, #444);font-size:var(--headerFontSize, 0.825em);font-weight:var(--headerFontWeight, 500)}.dateSelect.svelte-nnopc8{color:var(--dateSelectColor, #000);font-size:var(--dateSelectFontSize, 0.825em);font-weight:var(--dateSelectFontWeight, 300);height:var(--dateSelectHeight, 34px);width:var(--dateSelectWidth, 122px);margin-bottom:var(--dateSelectMarginBottom, 5px)}";
	append(document.head, style);
}

// (180:2) {:else}
function create_else_block(ctx) {
	let t0_value = /*labels*/ ctx[0].range + "";
	let t0;
	let t1;
	let t2;

	return {
		c() {
			t0 = text(t0_value);
			t1 = space();
			t2 = text(/*daysInDateRange*/ ctx[10]);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, t2, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labels*/ 1 && t0_value !== (t0_value = /*labels*/ ctx[0].range + "")) set_data(t0, t0_value);
			if (dirty[0] & /*daysInDateRange*/ 1024) set_data(t2, /*daysInDateRange*/ ctx[10]);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(t2);
		}
	};
}

// (178:24) 
function create_if_block_2(ctx) {
	let t_value = /*labels*/ ctx[0].greaterThan + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labels*/ 1 && t_value !== (t_value = /*labels*/ ctx[0].greaterThan + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (176:21) 
function create_if_block_1(ctx) {
	let t_value = /*labels*/ ctx[0].lessThan + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labels*/ 1 && t_value !== (t_value = /*labels*/ ctx[0].lessThan + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (174:2) {#if !startDate && !endDate}
function create_if_block(ctx) {
	let t_value = /*labels*/ ctx[0].notSet + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labels*/ 1 && t_value !== (t_value = /*labels*/ ctx[0].notSet + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$1(ctx) {
	let span;
	let t0;
	let t1;
	let t2;
	let br0;
	let t3;
	let input0;
	let t4;
	let input1;
	let t5;
	let button;
	let t6;
	let br1;
	let t7;
	let input2;
	let input2_title_value;
	let t8;
	let input3;
	let input3_title_value;
	let current;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (!/*startDate*/ ctx[6] && !/*endDate*/ ctx[7]) return create_if_block;
		if (/*lessThan*/ ctx[8]) return create_if_block_1;
		if (/*greaterThan*/ ctx[9]) return create_if_block_2;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);
	const icon = new Icon({ props: { class: "icons", icon: faCheck_2 } });

	return {
		c() {
			span = element("span");
			t0 = text(/*heading*/ ctx[1]);
			t1 = space();
			if_block.c();
			t2 = space();
			br0 = element("br");
			t3 = space();
			input0 = element("input");
			t4 = space();
			input1 = element("input");
			t5 = space();
			button = element("button");
			create_component(icon.$$.fragment);
			t6 = space();
			br1 = element("br");
			t7 = space();
			input2 = element("input");
			t8 = space();
			input3 = element("input");
			attr(span, "class", "heading svelte-nnopc8");
			attr(input0, "type", "date");
			attr(input0, "id", /*startDateId*/ ctx[3]);
			attr(input0, "class", "dateSelect svelte-nnopc8");
			attr(input0, "min", /*startDateMinRfc*/ ctx[13]);
			attr(input0, "max", /*endDateMaxRfc*/ ctx[14]);
			attr(input1, "type", "date");
			attr(input1, "id", /*endDateId*/ ctx[2]);
			attr(input1, "class", "dateSelect svelte-nnopc8");
			attr(input1, "min", /*startDateMinRfc*/ ctx[13]);
			attr(input1, "max", /*endDateMaxRfc*/ ctx[14]);
			attr(button, "class", "applyButton svelte-nnopc8");
			attr(button, "title", /*apply*/ ctx[16]);
			attr(input2, "type", "range");
			attr(input2, "class", "sliderStart svelte-nnopc8");
			attr(input2, "min", /*startDateMinTimestamp*/ ctx[11]);
			attr(input2, "max", /*endDateMaxTimestamp*/ ctx[12]);
			attr(input2, "step", "86400000");
			attr(input2, "title", input2_title_value = new Date(/*startDate*/ ctx[6]));
			attr(input3, "type", "range");
			attr(input3, "class", "sliderEnd svelte-nnopc8");
			attr(input3, "min", /*startDateMinTimestamp*/ ctx[11]);
			attr(input3, "max", /*endDateMaxTimestamp*/ ctx[12]);
			attr(input3, "step", "86400000");
			attr(input3, "title", input3_title_value = new Date(/*endDate*/ ctx[7]));
		},
		m(target, anchor, remount) {
			insert(target, span, anchor);
			append(span, t0);
			append(span, t1);
			if_block.m(span, null);
			insert(target, t2, anchor);
			insert(target, br0, anchor);
			insert(target, t3, anchor);
			insert(target, input0, anchor);
			set_input_value(input0, /*startDate*/ ctx[6]);
			insert(target, t4, anchor);
			insert(target, input1, anchor);
			set_input_value(input1, /*endDate*/ ctx[7]);
			insert(target, t5, anchor);
			insert(target, button, anchor);
			mount_component(icon, button, null);
			insert(target, t6, anchor);
			insert(target, br1, anchor);
			insert(target, t7, anchor);
			insert(target, input2, anchor);
			set_input_value(input2, /*sliderStartTimestamp*/ ctx[4]);
			insert(target, t8, anchor);
			insert(target, input3, anchor);
			set_input_value(input3, /*sliderEndTimestamp*/ ctx[5]);
			current = true;
			if (remount) run_all(dispose);

			dispose = [
				listen(input0, "input", /*input0_input_handler*/ ctx[26]),
				listen(input0, "input", /*input_handler*/ ctx[27]),
				listen(input1, "input", /*input1_input_handler*/ ctx[28]),
				listen(input1, "input", /*input_handler_1*/ ctx[29]),
				listen(button, "click", /*apply*/ ctx[16]),
				listen(input2, "change", /*input2_change_input_handler*/ ctx[30]),
				listen(input2, "input", /*input2_change_input_handler*/ ctx[30]),
				listen(input2, "input", /*input_handler_2*/ ctx[31]),
				listen(input3, "change", /*input3_change_input_handler*/ ctx[32]),
				listen(input3, "input", /*input3_change_input_handler*/ ctx[32]),
				listen(input3, "input", /*input_handler_3*/ ctx[33])
			];
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*heading*/ 2) set_data(t0, /*heading*/ ctx[1]);

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(span, null);
				}
			}

			if (!current || dirty[0] & /*startDateId*/ 8) {
				attr(input0, "id", /*startDateId*/ ctx[3]);
			}

			if (dirty[0] & /*startDate*/ 64) {
				set_input_value(input0, /*startDate*/ ctx[6]);
			}

			if (!current || dirty[0] & /*endDateId*/ 4) {
				attr(input1, "id", /*endDateId*/ ctx[2]);
			}

			if (dirty[0] & /*endDate*/ 128) {
				set_input_value(input1, /*endDate*/ ctx[7]);
			}

			if (!current || dirty[0] & /*startDate*/ 64 && input2_title_value !== (input2_title_value = new Date(/*startDate*/ ctx[6]))) {
				attr(input2, "title", input2_title_value);
			}

			if (dirty[0] & /*sliderStartTimestamp*/ 16) {
				set_input_value(input2, /*sliderStartTimestamp*/ ctx[4]);
			}

			if (!current || dirty[0] & /*endDate*/ 128 && input3_title_value !== (input3_title_value = new Date(/*endDate*/ ctx[7]))) {
				attr(input3, "title", input3_title_value);
			}

			if (dirty[0] & /*sliderEndTimestamp*/ 32) {
				set_input_value(input3, /*sliderEndTimestamp*/ ctx[5]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if_block.d();
			if (detaching) detach(t2);
			if (detaching) detach(br0);
			if (detaching) detach(t3);
			if (detaching) detach(input0);
			if (detaching) detach(t4);
			if (detaching) detach(input1);
			if (detaching) detach(t5);
			if (detaching) detach(button);
			destroy_component(icon);
			if (detaching) detach(t6);
			if (detaching) detach(br1);
			if (detaching) detach(t7);
			if (detaching) detach(input2);
			if (detaching) detach(t8);
			if (detaching) detach(input3);
			run_all(dispose);
		}
	};
}

function timeStampToRfc(date) {
	if (date) return new Date(date).toJSON().slice(0, 10);
	return undefined;
}

function dateToTimeStamp(date) {
	if (date) return new Date(date).valueOf();
	return undefined;
}

function instance$1($$self, $$props, $$invalidate) {
	let { startDateMin } = $$props;
	let { endDateMax } = $$props;
	let { name } = $$props;
	let { heading } = $$props;
	let { labels } = $$props;
	let { endDateId } = $$props;
	let { startDateId } = $$props;

	let defaultLabels = {
		notSet: "not set",
		greaterThan: "greater than",
		lessThan: "less than",
		range: "range",
		day: "day",
		days: "days!!",
		apply: "Apply"
	};

	labels = { ...defaultLabels, ...labels };
	if (!endDateMax) endDateMax = new Date();

	if (!startDateMin) {
		startDateMin = new Date(new Date().setFullYear(endDateMax.getFullYear(), endDateMax.getMonth() - 12));
	}

	const dispatch = createEventDispatcher();
	let today = new Date();
	const todayRfc = timeStampToRfc(today);
	const todayTimestamp = dateToTimeStamp(today);
	const startDateMinTimestamp = dateToTimeStamp(startDateMin);
	const endDateMaxTimestamp = dateToTimeStamp(endDateMax);
	const startDateMinRfc = timeStampToRfc(startDateMin);
	const endDateMaxRfc = timeStampToRfc(endDateMax);
	let sliderStartTimestamp = todayTimestamp;
	let sliderEndTimestamp = todayTimestamp;
	let startDate = todayRfc;
	let endDate = todayRfc;
	let lessThan = false;
	let greaterThan = false;
	let daysInDateRange;

	function dateOrSliderChange(item) {
		if (item == "endDate" && endDate && endDate < startDate) $$invalidate(6, startDate = endDate);
		if (item == "startDate" && startDate && startDate > endDate && endDate) $$invalidate(7, endDate = startDate);

		if (item == "endDate" || item == "startDate") {
			$$invalidate(5, sliderEndTimestamp = dateToTimeStamp(endDate));
			$$invalidate(4, sliderStartTimestamp = dateToTimeStamp(startDate));
		}

		if (item == "sliderEndTimestamp" && sliderEndTimestamp < sliderStartTimestamp || !sliderStartTimestamp) $$invalidate(4, sliderStartTimestamp = sliderEndTimestamp);
		if (item == "sliderStartTimestamp" && sliderStartTimestamp > sliderEndTimestamp || !sliderEndTimestamp) $$invalidate(5, sliderEndTimestamp = sliderStartTimestamp);

		if (item == "sliderEndTimestamp" || item == "sliderStartTimestamp") {
			$$invalidate(7, endDate = timeStampToRfc(sliderEndTimestamp));
			$$invalidate(6, startDate = timeStampToRfc(sliderStartTimestamp));
		}

		if (!endDate && startDate) {
			$$invalidate(9, greaterThan = true);
			$$invalidate(8, lessThan = false);
		}

		if (!startDate && endDate) {
			$$invalidate(9, greaterThan = false);
			$$invalidate(8, lessThan = true);
		}

		if (startDate && endDate) {
			$$invalidate(8, lessThan = false);
			$$invalidate(9, greaterThan = false);
		}
	}

	function numberOfDaysBetweenSelectedDateRange(startDate, endDate) {
		if (endDate == startDate) {
			return `1 ${labels.day}`;
		} else {
			const differenceInTime = new Date(endDate).getTime() - new Date(startDate).getTime();
			return (differenceInTime / (1000 * 3600 * 24)).toString() + ` ${labels.days}`;
		}
	}

	const apply = () => {
		dispatch("onApplyDateRange", { startDate, endDate, name });
	};

	function input0_input_handler() {
		startDate = this.value;
		$$invalidate(6, startDate);
	}

	const input_handler = () => {
		dateOrSliderChange("startDate");
	};

	function input1_input_handler() {
		endDate = this.value;
		$$invalidate(7, endDate);
	}

	const input_handler_1 = () => {
		dateOrSliderChange("endDate");
	};

	function input2_change_input_handler() {
		sliderStartTimestamp = to_number(this.value);
		$$invalidate(4, sliderStartTimestamp);
	}

	const input_handler_2 = () => {
		dateOrSliderChange("sliderStartTimestamp");
	};

	function input3_change_input_handler() {
		sliderEndTimestamp = to_number(this.value);
		$$invalidate(5, sliderEndTimestamp);
	}

	const input_handler_3 = () => {
		dateOrSliderChange("sliderEndTimestamp");
	};

	$$self.$set = $$props => {
		if ("startDateMin" in $$props) $$invalidate(17, startDateMin = $$props.startDateMin);
		if ("endDateMax" in $$props) $$invalidate(18, endDateMax = $$props.endDateMax);
		if ("name" in $$props) $$invalidate(19, name = $$props.name);
		if ("heading" in $$props) $$invalidate(1, heading = $$props.heading);
		if ("labels" in $$props) $$invalidate(0, labels = $$props.labels);
		if ("endDateId" in $$props) $$invalidate(2, endDateId = $$props.endDateId);
		if ("startDateId" in $$props) $$invalidate(3, startDateId = $$props.startDateId);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*startDate, endDate*/ 192) {
			 $$invalidate(10, daysInDateRange = numberOfDaysBetweenSelectedDateRange(startDate, endDate));
		}
	};

	return [
		labels,
		heading,
		endDateId,
		startDateId,
		sliderStartTimestamp,
		sliderEndTimestamp,
		startDate,
		endDate,
		lessThan,
		greaterThan,
		daysInDateRange,
		startDateMinTimestamp,
		endDateMaxTimestamp,
		startDateMinRfc,
		endDateMaxRfc,
		dateOrSliderChange,
		apply,
		startDateMin,
		endDateMax,
		name,
		defaultLabels,
		dispatch,
		today,
		todayRfc,
		todayTimestamp,
		numberOfDaysBetweenSelectedDateRange,
		input0_input_handler,
		input_handler,
		input1_input_handler,
		input_handler_1,
		input2_change_input_handler,
		input_handler_2,
		input3_change_input_handler,
		input_handler_3
	];
}

class DateRangeSelect extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-nnopc8-style")) add_css$1();

		init(
			this,
			options,
			instance$1,
			create_fragment$1,
			safe_not_equal,
			{
				startDateMin: 17,
				endDateMax: 18,
				name: 19,
				heading: 1,
				labels: 0,
				endDateId: 2,
				startDateId: 3
			},
			[-1, -1]
		);
	}
}

export default DateRangeSelect;
